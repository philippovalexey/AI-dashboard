import streamlit as st
import pandas as pd
import altair as alt
import datetime

st.set_page_config(layout="wide")
st.image("https://upload.wikimedia.org/wikipedia/commons/8/87/Alfabank_logo.png", width=180)

st.title("AI Operations Dashboard ‚Äì –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫")
st.markdown("### –§–∏–Ω–∞–Ω—Å–æ–≤–æ-–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI-–ø—Ä–æ–µ–∫—Ç–∞–º–∏ (2025‚Äì2028)")

# -------------------------------
# 1. –≠–∫–æ–Ω–æ–º–∏–∫–∞ –ò–ò (P&L-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
# -------------------------------
st.header("üìä –≠–∫–æ–Ω–æ–º–∏–∫–∞ –ò–ò (P&L-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞)")

st.markdown("#### üìâ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –±–∞–Ω–∫–∞ vs. –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò")
growth_rate = st.slider("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä–æ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∞ –ò–ò (% –µ–∂–µ–≥–æ–¥–Ω–æ)", min_value=0, max_value=100, value=0, step=5)
relative_toggle = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤ –¥–æ–ª—è—Ö –æ—Ç –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤", value=False)

base_expense = [450_000, 470_000, 495_000, 520_000]
base_ai_saving = [800, 1_500, 2_500, 4_000]
years = [2025, 2026, 2027, 2028]

ai_saving_forecasted = [round(val * (1 + growth_rate / 100) ** i) for i, val in enumerate(base_ai_saving)]
expense_data = pd.DataFrame({
    "–ì–æ–¥": years,
    "–†–∞—Å—Ö–æ–¥—ã –±–∞–Ω–∫–∞, –º–ª–Ω ‚ÇΩ": base_expense,
    "–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò, –º–ª–Ω ‚ÇΩ": ai_saving_forecasted
})
expense_data["–†–∞—Å—Ö–æ–¥—ã –±–µ–∑ –ò–ò, –º–ª–Ω ‚ÇΩ"] = expense_data["–†–∞—Å—Ö–æ–¥—ã –±–∞–Ω–∫–∞, –º–ª–Ω ‚ÇΩ"] - expense_data["–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò, –º–ª–Ω ‚ÇΩ"]

if relative_toggle:
    expense_data["–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò, %"] = round(expense_data["–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò, –º–ª–Ω ‚ÇΩ"] / expense_data["–†–∞—Å—Ö–æ–¥—ã –±–∞–Ω–∫–∞, –º–ª–Ω ‚ÇΩ"] * 100, 2)
    chart = alt.Chart(expense_data).mark_line(point=True).encode(
        x=alt.X("–ì–æ–¥:O", title="–ì–æ–¥"),
        y=alt.Y("–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò, %:Q", title="–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò (%)"),
        tooltip=["–ì–æ–¥", "–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò, %"]
    ).properties(width=500, height=300)
    st.altair_chart(chart, use_container_width=True)
else:
    base = alt.Chart(expense_data).encode(x=alt.X("–ì–æ–¥:O", title="–ì–æ–¥"))
    bar_base = base.mark_bar(color="#AEC6CF").encode(
        y=alt.Y("–†–∞—Å—Ö–æ–¥—ã –±–µ–∑ –ò–ò, –º–ª–Ω ‚ÇΩ:Q", title="–†–∞—Å—Ö–æ–¥—ã, –º–ª–Ω ‚ÇΩ"),
        tooltip=["–ì–æ–¥", "–†–∞—Å—Ö–æ–¥—ã –±–∞–Ω–∫–∞, –º–ª–Ω ‚ÇΩ", "–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò, –º–ª–Ω ‚ÇΩ"]
    )
    bar_ai = base.mark_bar(color="#FF6961").encode(
        y="–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò, –º–ª–Ω ‚ÇΩ:Q"
    )
    chart = (bar_base + bar_ai).properties(width=500, height=300).configure_axis(
        labelFontSize=12,
        titleFontSize=14
    ).configure_view(strokeWidth=0)
    st.altair_chart(chart, use_container_width=True)

with st.expander("üìå –ò–∑ —á–µ–≥–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —ç–∫–æ–Ω–æ–º–∏—è, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –ò–ò"):
    st.markdown("""
    **–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∑–∞—Ç—Ä–∞—Ç:**
    - ü§ñ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä (chat-–±–æ—Ç—ã, auto-reply) ‚Äî —Ä–∞–Ω—å—à–µ 10 –º–ª–Ω/–º–µ—Å, —Ç–µ–ø–µ—Ä—å 2 –º–ª–Ω
    - üîç –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ KYC/AML –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
    - üè¶ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –≤ back office
    - üìâ –°–Ω–∏–∂–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ LLM

    **–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ò–ò: 6 000 –º–ª–Ω ‚ÇΩ**  
    **–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç —Å 2023: > 20 –º–ª–Ω ‚ÇΩ / –º–µ—Å**  
    **–î–æ–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –æ—Ç –ò–ò: –¥–æ 6.9% –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ 2028 –≥–æ–¥—É**
    """)

with st.expander("üóÇÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º–∏ –±–∞–Ω–∫–∞–º–∏ (peer benchmark)"):
    benchmark = pd.DataFrame({
        "–ë–∞–Ω–∫": ["–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫", "–¢–∏–Ω—å–∫–æ—Ñ—Ñ", "–°–±–µ—Ä", "–í–¢–ë"],
        "–≠–∫–æ–Ω–æ–º–∏—è –æ—Ç –ò–ò, % –æ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤": [6.9, 5.2, 8.5, 4.4]
    })
    st.bar_chart(benchmark.set_index("–ë–∞–Ω–∫"))

with st.expander("üìà Waterfall: –≠—Ñ—Ñ–µ–∫—Ç –æ—Ç –ò–ò –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º"):
    waterfall_data = pd.DataFrame({
        "–≠—Ç–∞–ø": [
            "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ò–ò (CapEx)",
            "–≠–∫–æ–Ω–æ–º–∏—è: –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
            "–≠–∫–æ–Ω–æ–º–∏—è: KYC/AML",
            "–≠–∫–æ–Ω–æ–º–∏—è: –ë—ç–∫-–æ—Ñ–∏—Å",
            "–≠–∫–æ–Ω–æ–º–∏—è: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            "–°–æ–≤–æ–∫—É–ø–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"
        ],
        "–ó–Ω–∞—á–µ–Ω–∏–µ": [-6000, 96, 420, 1800, 350, 0]
    })
    waterfall_data.loc[5, "–ó–Ω–∞—á–µ–Ω–∏–µ"] = waterfall_data["–ó–Ω–∞—á–µ–Ω–∏–µ"][1:5].sum() - 6000
    waterfall_data["–¶–≤–µ—Ç"] = ["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–≠–∫–æ–Ω–æ–º–∏—è", "–≠–∫–æ–Ω–æ–º–∏—è", "–≠–∫–æ–Ω–æ–º–∏—è", "–≠–∫–æ–Ω–æ–º–∏—è", "–ò—Ç–æ–≥"]

    waterfall_chart = alt.Chart(waterfall_data).mark_bar().encode(
        x=alt.X("–≠—Ç–∞–ø:N", sort=None, title=""),
        y=alt.Y("–ó–Ω–∞—á–µ–Ω–∏–µ:Q", title="–º–ª–Ω ‚ÇΩ"),
        color=alt.Color("–¶–≤–µ—Ç:N", scale=alt.Scale(
            domain=["–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–≠–∫–æ–Ω–æ–º–∏—è", "–ò—Ç–æ–≥"],
            range=["#ff6961", "#77dd77", "#779ecb"]
        )),
        tooltip=["–≠—Ç–∞–ø", "–ó–Ω–∞—á–µ–Ω–∏–µ"]
    ).properties(width=700, height=400)
    st.altair_chart(waterfall_chart, use_container_width=True)
# -------------------------------
# 2. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (MECE)
# -------------------------------
st.header("üìÇ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ AI-–ø—Ä–æ–µ–∫—Ç—ã, –º–ª–Ω ‚ÇΩ")

with st.expander("üìå –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è"):
    spending = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": [
            "–§–û–¢ ‚Äî NLP (6 —á–µ–ª)", "–§–û–¢ ‚Äî MLOps (4 —á–µ–ª)", "–§–û–¢ ‚Äî DevOps (3 —á–µ–ª)", "–§–û–¢ ‚Äî PM (2 —á–µ–ª)",
            "R&D ‚Äî —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã", "R&D ‚Äî –ª–∏—Ü–µ–Ω–∑–∏–∏ LLM", "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî GPU", "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äî –æ–±–ª–∞–∫–æ", "PM / Support / QA"
        ],
        "2025": [1_200, 900, 600, 300, 600, 400, 700, 500, 400],
        "2026": [1_400, 1_000, 650, 320, 700, 450, 750, 550, 450]
    })
    st.dataframe(spending.set_index("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"))

# -------------------------------
# 3. KPI –∫–æ–º–∞–Ω–¥ (–ø–ª–∞–Ω / —Ñ–∞–∫—Ç / RAG)
# -------------------------------
st.header("üìå KPI –∫–æ–º–∞–Ω–¥ (–ø–ª–∞–Ω / —Ñ–∞–∫—Ç / —Å—Ç–∞—Ç—É—Å RAG)")

kpi_data = pd.DataFrame({
    "–ö–æ–º–∞–Ω–¥–∞": ["NLP", "MLOps", "DevOps", "PM"],
    "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": ["Precision –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", "% CI/CD-–¥–µ–ø–ª–æ–µ–≤", "–ê–ø—Ç–∞–π–º —Å–µ—Ä–≤–∏—Å–æ–≤", "–ö–æ–ª-–≤–æ MVP –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª"],
    "–ü–ª–∞–Ω": [0.92, 0.97, 99.9, 8],
    "–§–∞–∫—Ç": [0.89, 0.95, 99.5, 6],
    "RAG": ["üü†", "üü†", "üü¢", "üî¥"]
})

st.dataframe(kpi_data)

# -------------------------------
# 4. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
# -------------------------------
st.header("üßë‚Äçüíª –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")

team_choice = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É", ["NLP", "MLOps", "DevOps", "PM"])

employee_data = {
    "NLP": pd.DataFrame({
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": ["–ò–≤–∞–Ω–æ–≤", "–ü–µ—Ç—Ä–æ–≤", "–°–∏–¥–æ—Ä–æ–≤"],
        "–ü–ª–∞–Ω –∑–∞–¥–∞—á": [28, 30, 26],
        "–§–∞–∫—Ç –∑–∞–¥–∞—á": [25, 30, 28]
    }),
    "MLOps": pd.DataFrame({
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": ["–ù–æ–≤–∏–∫–æ–≤–∞", "–§—Ä–æ–ª–æ–≤"],
        "–ü–ª–∞–Ω –∑–∞–¥–∞—á": [38, 36],
        "–§–∞–∫—Ç –∑–∞–¥–∞—á": [40, 35]
    }),
    "DevOps": pd.DataFrame({
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": ["–û—Ä–ª–æ–≤", "–ú–æ—Ä–æ–∑–æ–≤", "–ó–∞–π—Ü–µ–≤–∞"],
        "–ü–ª–∞–Ω –∑–∞–¥–∞—á": [20, 20, 23],
        "–§–∞–∫—Ç –∑–∞–¥–∞—á": [20, 18, 25]
    }),
    "PM": pd.DataFrame({
        "–°–æ—Ç—Ä—É–¥–Ω–∏–∫": ["–°–µ–º–µ–Ω–æ–≤", "–ì—Ä–∏–≥–æ—Ä—å–µ–≤–∞"],
        "–ü–ª–∞–Ω –∑–∞–¥–∞—á": [12, 10],
        "–§–∞–∫—Ç –∑–∞–¥–∞—á": [10, 12]
    })
}

df = employee_data[team_choice]
df["–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ, %"] = (df["–§–∞–∫—Ç –∑–∞–¥–∞—á"] / df["–ü–ª–∞–Ω –∑–∞–¥–∞—á"] * 100).round(1)
df = df.sort_values("–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ, %", ascending=False).reset_index(drop=True)

st.dataframe(df)

# -------------------------------
# 5. –ü–ª–∞–Ω-–≥—Ä–∞—Ñ–∏–∫ (Gantt)
# -------------------------------
st.header("üìÖ –ü–ª–∞–Ω-–≥—Ä–∞—Ñ–∏–∫ AI-–ø—Ä–æ–µ–∫—Ç–æ–≤")

gantt_data = pd.DataFrame({
    "–ü—Ä–æ–µ–∫—Ç": ["–ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞", "–ú–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CI/CD", "LLM –≤ –ö–¶", "–û–±–ª–∞—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è"],
    "–ù–∞—á–∞–ª–æ": [datetime.date(2025, 1, 15), datetime.date(2025, 2, 10), datetime.date(2025, 3, 1),
               datetime.date(2025, 3, 20), datetime.date(2025, 4, 5)],
    "–û–∫–æ–Ω—á–∞–Ω–∏–µ": [datetime.date(2025, 2, 28), datetime.date(2025, 4, 1), datetime.date(2025, 4, 10),
                  datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]
})

gantt_chart = alt.Chart(gantt_data).mark_bar().encode(
    x='–ù–∞—á–∞–ª–æ:T',
    x2='–û–∫–æ–Ω—á–∞–Ω–∏–µ:T',
    y=alt.Y('–ü—Ä–æ–µ–∫—Ç:N', sort=None),
    color=alt.value("#007BFF")
).properties(height=300)

st.altair_chart(gantt_chart, use_container_width=True)


st.markdown("### –§–∏–Ω–∞–Ω—Å–æ–≤–æ-–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI-–ø—Ä–æ–µ–∫—Ç–∞–º–∏ (2025‚Äì2028)")

# -------------------------------
# -------------------------------
# –ü—Ä–æ–µ–∫—Ç–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)
# -------------------------------
st.header("üìà –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã –ø—Ä–æ–µ–∫—Ç–æ–≤")

# -- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∫–≤–∞—Ä—Ç–∞–ª–∞–º --
project_data = pd.DataFrame({
    "–ü—Ä–æ–µ–∫—Ç": ["–ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞"] * 4 + ["–ú–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞"] * 4 + ["–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CI/CD"] * 4 + ["LLM –≤ –ö–¶"] * 4 + ["–û–±–ª–∞—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è"] * 4,
    "–ö–≤–∞—Ä—Ç–∞–ª": ["Q1", "Q2", "Q3", "Q4"] * 5,
    "–ü—Ä–æ–≥—Ä–µ—Å—Å, %": [20, 50, 80, 100, 10, 35, 60, 100, 25, 55, 85, 100, 15, 40, 70, 95, 5, 30, 60, 100],
    "CSAT, %": [87, 89, 90, 91, 82, 85, 88, 90, 80, 82, 85, 87, 88, 89, 91, 93, 83, 84, 86, 88],
    "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–æ–∫–∞, –¥–Ω–µ–π": [0, 1, -2, -3, 5, 3, 0, -1, 2, 0, -2, -4, 1, 0, -1, -2, 7, 5, 1, 0]
})

# -- –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø–æ –¥–∞—Ç–µ) --
voc_data = pd.DataFrame({
    "–ü—Ä–æ–µ–∫—Ç": ["–ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞"] * 3,
    "–î–∞—Ç–∞": pd.to_datetime(["2025-01-31", "2025-02-29", "2025-03-31"]),
    "VOC, %": [72, 75, 78]
})

accuracy_data = pd.DataFrame({
    "–ü—Ä–æ–µ–∫—Ç": ["–ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞"] * 6,
    "–î–∞—Ç–∞": pd.to_datetime(["2025-03-01", "2025-03-08", "2025-03-15", "2025-03-22", "2025-03-29", "2025-04-05"]),
    "–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å, %": [87, 88, 90, 91, 92, 91]
})

# -- –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ --
selected_project = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", project_data["–ü—Ä–æ–µ–∫—Ç"].unique())

# -- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É --
project_subset = project_data[project_data["–ü—Ä–æ–µ–∫—Ç"] == selected_project]
voc_subset = voc_data[voc_data["–ü—Ä–æ–µ–∫—Ç"] == selected_project]
accuracy_subset = accuracy_data[accuracy_data["–ü—Ä–æ–µ–∫—Ç"] == selected_project]
with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ä VOC / –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏"):
    new_date = st.date_input("–î–∞—Ç–∞ –∑–∞–º–µ—Ä–∞", datetime.date.today())
    new_voc = st.number_input("VOC, %", min_value=0, max_value=100, step=1)
    new_accuracy = st.number_input("–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å, %", min_value=0, max_value=100, step=1)
    if st.button("üíæ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ä—ã"):
        st.warning("üîí –ü–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è. –î–æ–±–∞–≤–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –±–∞–∑—É –∏–ª–∏ session_state.")
# -- –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ --
st.subheader(f"üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {selected_project}")

chart_progress = alt.Chart(project_subset).mark_line(point=True, color="#007BFF").encode(
    x=alt.X("–ö–≤–∞—Ä—Ç–∞–ª:O"),
    y=alt.Y("–ü—Ä–æ–≥—Ä–µ—Å—Å, %:Q"),
    tooltip=["–ö–≤–∞—Ä—Ç–∞–ª", "–ü—Ä–æ–≥—Ä–µ—Å—Å, %"]
).properties(height=250, title="–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞")

chart_csat = alt.Chart(project_subset).mark_line(point=True, color="#00CC88").encode(
    x=alt.X("–ö–≤–∞—Ä—Ç–∞–ª:O"),
    y=alt.Y("CSAT, %:Q"),
    tooltip=["–ö–≤–∞—Ä—Ç–∞–ª", "CSAT, %"]
).properties(height=250, title="–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å (CSAT)")

chart_delay = alt.Chart(project_subset).mark_bar(color="#FF9966").encode(
    x=alt.X("–ö–≤–∞—Ä—Ç–∞–ª:O"),
    y=alt.Y("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–æ–∫–∞, –¥–Ω–µ–π:Q"),
    tooltip=["–ö–≤–∞—Ä—Ç–∞–ª", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–æ–∫–∞, –¥–Ω–µ–π"]
).properties(height=250, title="–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–æ–∫–∞ (–≤ –¥–Ω—è—Ö)")

st.altair_chart(chart_progress, use_container_width=True)
st.altair_chart(chart_csat, use_container_width=True)
st.altair_chart(chart_delay, use_container_width=True)

# -- VOC –≥—Ä–∞—Ñ–∏–∫ --
if not voc_subset.empty:
    voc_chart = alt.Chart(voc_subset).mark_line(point=True, color="#6A5ACD").encode(
        x=alt.X("–î–∞—Ç–∞:T", title="–ú–µ—Å—è—Ü"),
        y=alt.Y("VOC, %:Q"),
        tooltip=["–î–∞—Ç–∞", "VOC, %"]
    ).properties(height=250, title="–û—Ü–µ–Ω–∫–∞ –≥–æ–ª–æ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ (VOC)")
    st.altair_chart(voc_chart, use_container_width=True)

# -- Accuracy –≥—Ä–∞—Ñ–∏–∫ --
if not accuracy_subset.empty:
    acc_chart = alt.Chart(accuracy_subset).mark_line(point=True, color="#DC143C").encode(
        x=alt.X("–î–∞—Ç–∞:T", title="–î–∞—Ç–∞ –∑–∞–º–µ—Ä–∞"),
        y=alt.Y("–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å, %:Q"),
        tooltip=["–î–∞—Ç–∞", "–î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å, %"]
    ).properties(height=250, title="–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ (–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å)")
    st.altair_chart(acc_chart, use_container_width=True)

# -- –¢–∞–π–º–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞ --
st.subheader("üìÖ –¢–∞–π–º–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–∞")
project_timeline = pd.DataFrame({
    "–ü—Ä–æ–µ–∫—Ç": ["–ó–∞–ø—É—Å–∫ —á–∞—Ç-–±–æ—Ç–∞", "–ú–æ–¥–µ–ª—å –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è CI/CD", "LLM –≤ –ö–¶", "–û–±–ª–∞—á–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è"],
    "–ù–∞—á–∞–ª–æ": [datetime.date(2025, 1, 15), datetime.date(2025, 2, 10), datetime.date(2025, 3, 1),
               datetime.date(2025, 3, 20), datetime.date(2025, 4, 5)],
    "–û–∫–æ–Ω—á–∞–Ω–∏–µ": [datetime.date(2025, 2, 28), datetime.date(2025, 4, 1), datetime.date(2025, 4, 10),
                  datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]
})

timeline_chart = alt.Chart(project_timeline[project_timeline["–ü—Ä–æ–µ–∫—Ç"] == selected_project]).mark_bar().encode(
    x='–ù–∞—á–∞–ª–æ:T',
    x2='–û–∫–æ–Ω—á–∞–Ω–∏–µ:T',
    y=alt.Y('–ü—Ä–æ–µ–∫—Ç:N', sort=None),
    color=alt.value("#007BFF")
).properties(height=100)

st.altair_chart(timeline_chart, use_container_width=True)

st.markdown("---")
st.caption("¬© 2025 AI & LLM Business Dashboard –¥–ª—è –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ (mock).")
